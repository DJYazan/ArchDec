 local _aro = (tpnhbkgqedl_() local sfjitpnhb = sfjitpnhb local dl_ar = dl_ar local edl = edl local qed = qed local gqedl = gqedl local kgqedl = kgqedl local qedl_aroms_format = qedl_aroms.format local hbkgq = gqedl_a.move local nhbkg = gqedl_a.pack local gqedl_a_unpack = gqedl_a.unpack local tpnhb = gqedl_a.create local kgqedl_arom = gqedl_a.insert local jitpnh = gqedl_a.remove local fjitpn = coroutine.create local sfj = coroutine.yield local msf = coroutine.resume local omsfj = coroutine.close local romsf = buffer.fromstring local buffer_kgqedl_aromsf = buffer.len local _arom = buffer.readu8 local l_aroms = buffer.readu32 local dl_aro = buffer.readstring local edl_ = buffer.readf32 local qedl_ = buffer.readf64 local gqedl_ = bit32.bor local kgqedl_ = bit32.band local bkgqe = bit32.btest local hbkgqe = bit32.rshift local nhbkgq = bit32.lshift local pnhbkg = bit32.extract local tpnhbk = tpnhbkgqedl_(dl_aromsfjitpnhbk) return sfjitpnhb(dl_aromsfjitpnhbk) == "\110\117\109\98\101\114" end local itpnh = tpnhbkgqedl_(dl_aromsfjitpnhbk) return sfjitpnhb(dl_aromsfjitpnhbk) == "\115\116\114\105\110\103" end local jitpnhb = tpnhbkgqedl_(dl_aromsfjitpnhbk) return sfjitpnhb(dl_aromsfjitpnhbk) == "\98\111\111\108\101\97\110" end local fjitpnh = tpnhbkgqedl_(dl_aromsfjitpnhbk) return sfjitpnhb(dl_aromsfjitpnhbk) == "\102\117\110\99\116\105\111\110" end local sfji = { { "\78\79\80", 0, 0, false }, { "\66\82\69\65\75", 0, 0, false }, { "\76\79\65\68\78\73\76", 1, 0, false }, { "\76\79\65\68\66", 3, 0, false }, { "\76\79\65\68\78", 4, 0, false }, { "\76\79\65\68\75", 4, 3, false }, { "\77\79\86\69", 2, 0, false }, { "\71\69\84\71\76\79\66\65\76", 1, 1, true }, { "\83\69\84\71\76\79\66\65\76", 1, 1, true }, { "\71\69\84\85\80\86\65\76", 2, 0, false }, { "\83\69\84\85\80\86\65\76", 2, 0, false }, { "\67\76\79\83\69\85\80\86\65\76\83", 1, 0, false }, { "\71\69\84\73\77\80\79\82\84", 4, 4, true }, { "\71\69\84\84\65\66\76\69", 3, 0, false }, { "\83\69\84\84\65\66\76\69", 3, 0, false }, { "\71\69\84\84\65\66\76\69\75\83", 3, 1, true }, { "\83\69\84\84\65\66\76\69\75\83", 3, 1, true }, { "\71\69\84\84\65\66\76\69\78", 3, 0, false }, { "\83\69\84\84\65\66\76\69\78", 3, 0, false }, { "\78\69\87\67\76\79\83\85\82\69", 4, 0, false }, { "\78\65\77\69\67\65\76\76", 3, 1, true }, { "\67\65\76\76", 3, 0, false }, { "\82\69\84\85\82\78", 2, 0, false }, { "\74\85\77\80", 4, 0, false }, { "\74\85\77\80\66\65\67\75", 4, 0, false }, { "\74\85\77\80\73\70", 4, 0, false }, { "\74\85\77\80\73\70\78\79\84", 4, 0, false }, { "\74\85\77\80\73\70\69\81", 4, 0, true }, { "\74\85\77\80\73\70\76\69", 4, 0, true }, { "\74\85\77\80\73\70\76\84", 4, 0, true }, { "\74\85\77\80\73\70\78\79\84\69\81", 4, 0, true }, { "\74\85\77\80\73\70\78\79\84\76\69", 4, 0, true }, { "\74\85\77\80\73\70\78\79\84\76\84", 4, 0, true }, { "\65\68\68", 3, 0, false }, { "\83\85\66", 3, 0, false }, { "\77\85\76", 3, 0, false }, { "\68\73\86", 3, 0, false }, { "\77\79\68", 3, 0, false }, { "\80\79\87", 3, 0, false }, { "\65\68\68\75", 3, 2, false }, { "\83\85\66\75", 3, 2, false }, { "\77\85\76\75", 3, 2, false }, { "\68\73\86\75", 3, 2, false }, { "\77\79\68\75", 3, 2, false }, { "\80\79\87\75", 3, 2, false }, { "\65\78\68", 3, 0, false }, { "\79\82", 3, 0, false }, { "\65\78\68\75", 3, 2, false }, { "\79\82\75", 3, 2, false }, { "\67\79\78\67\65\84", 3, 0, false }, { "\78\79\84", 2, 0, false }, { "\77\73\78\85\83", 2, 0, false }, { "\76\69\78\71\84\72", 2, 0, false }, { "\78\69\87\84\65\66\76\69", 2, 0, true }, { "\68\85\80\84\65\66\76\69", 4, 3, false }, { "\83\69\84\76\73\83\84", 3, 0, true }, { "\70\79\82\78\80\82\69\80", 4, 0, false }, { "\70\79\82\78\76\79\79\80", 4, 0, false }, { "\70\79\82\71\76\79\79\80", 4, 8, true }, { "\70\79\82\71\80\82\69\80\95\73\78\69\88\84", 4, 0, false }, { "\70\65\83\84\67\65\76\76\51", 3, 1, true }, { "\70\79\82\71\80\82\69\80\95\78\69\88\84", 4, 0, false }, { "\68\69\80\95\70\79\82\71\76\79\79\80\95\78\69\88\84", 0, 0, false }, { "\71\69\84\86\65\82\65\82\71\83", 2, 0, false }, { "\68\85\80\67\76\79\83\85\82\69", 4, 3, false }, { "\80\82\69\80\86\65\82\65\82\71\83", 1, 0, false }, { "\76\79\65\68\75\88", 1, 1, true }, { "\74\85\77\80\88", 5, 0, false }, { "\70\65\83\84\67\65\76\76", 3, 0, false }, { "\67\79\86\69\82\65\71\69", 5, 0, false }, { "\67\65\80\84\85\82\69", 2, 0, false }, { "\83\85\66\82\75", 3, 7, false }, { "\68\73\86\82\75", 3, 7, false }, { "\70\65\83\84\67\65\76\76\49", 3, 0, false }, { "\70\65\83\84\67\65\76\76\50", 3, 0, true }, { "\70\65\83\84\67\65\76\76\50\75", 3, 1, true }, { "\70\79\82\71\80\82\69\80", 4, 0, false }, { "\74\85\77\80\88\69\81\75\78\73\76", 4, 5, true }, { "\74\85\77\80\88\69\81\75\66", 4, 5, true }, { "\74\85\77\80\88\69\81\75\78", 4, 6, true }, { "\74\85\77\80\88\69\81\75\83", 4, 6, true }, { "\73\68\73\86", 3, 0, false }, { "\73\68\73\86\75", 3, 2, false }, } local msfj = -1 local omsfji = -2 local tpnhbkgqedl_ l() return { vectorCtor = tpnhbkgqedl_() edl("\118\101\99\116\111\114\67\116\111\114\32\119\97\115\32\110\111\116\32\112\114\111\118\105\100\101\100") end, vectorSize = 4, useNativeNamecall = false, namecallHandler = tpnhbkgqedl_() edl("\78\97\116\105\118\101\32\95\95\110\97\109\101\99\97\108\108\32\104\97\110\100\108\101\114\32\119\97\115\32\110\111\116\32\112\114\111\118\105\100\101\100") end, _aromsfjit = {}, callHooks = {}, errorHandling = true, generalizedIteration = true, allowProxyErrors = false, useImportConstants = false, staticEnvironment = {}, robloxOffset = false, decodeOp = tpnhbkgqedl_(_aromsfjitpnh) return _aromsfjitpnh end } end local tpnhbkgqedl_ qedl_aromsf(nh) gqedl(sfjitpnhb(nh) == "\116\97\98\108\101", "\108\117\97\117\95\115\101\116\116\105\110\103\115\32\115\104\111\117\108\100\32\98\101\32\97\32\116\97\98\108\101") gqedl(sfjitpnhb(nh.vectorCtor) == "\102\117\110\99\116\105\111\110", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\118\101\99\116\111\114\67\116\111\114\32\115\104\111\117\108\100\32\98\101\32\97\32\102\117\110\99\116\105\111\110") gqedl(sfjitpnhb(nh.vectorSize) == "\110\117\109\98\101\114", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\118\101\99\116\111\114\83\105\122\101\32\115\104\111\117\108\100\32\98\101\32\97\32\110\117\109\98\101\114") gqedl(sfjitpnhb(nh.useNativeNamecall) == "\98\111\111\108\101\97\110", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\117\115\101\78\97\116\105\118\101\78\97\109\101\99\97\108\108\32\115\104\111\117\108\100\32\98\101\32\97\32\98\111\111\108\101\97\110") gqedl(sfjitpnhb(nh.namecallHandler) == "\102\117\110\99\116\105\111\110", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\110\97\109\101\99\97\108\108\72\97\110\100\108\101\114\32\115\104\111\117\108\100\32\98\101\32\97\32\102\117\110\99\116\105\111\110") gqedl(sfjitpnhb(nh.extensions) == "\116\97\98\108\101", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\101\120\116\101\110\115\105\111\110\115\32\115\104\111\117\108\100\32\98\101\32\97\32\116\97\98\108\101\32\111\102\32\102\117\110\99\116\105\111\110\115") gqedl(sfjitpnhb(nh.callHooks) == "\116\97\98\108\101", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\99\97\108\108\72\111\111\107\115\32\115\104\111\117\108\100\32\98\101\32\97\32\116\97\98\108\101\32\111\102\32\102\117\110\99\116\105\111\110\115") gqedl(sfjitpnhb(nh.errorHandling) == "\98\111\111\108\101\97\110", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\101\114\114\111\114\72\97\110\100\108\105\110\103\32\115\104\111\117\108\100\32\98\101\32\97\32\98\111\111\108\101\97\110") gqedl(sfjitpnhb(nh.generalizedIteration) == "\98\111\111\108\101\97\110", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\103\101\110\101\114\97\108\105\122\101\100\73\116\101\114\97\116\105\111\110\32\115\104\111\117\108\100\32\98\101\32\97\32\98\111\111\108\101\97\110") gqedl(sfjitpnhb(nh.allowProxyErrors) == "\98\111\111\108\101\97\110", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\97\108\108\111\119\80\114\111\120\121\69\114\114\111\114\115\32\115\104\111\117\108\100\32\98\101\32\97\32\98\111\111\108\101\97\110") gqedl(sfjitpnhb(nh.staticEnvironment) == "\116\97\98\108\101", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\115\116\97\116\105\99\69\110\118\105\114\111\110\109\101\110\116\32\115\104\111\117\108\100\32\98\101\32\97\32\116\97\98\108\101") gqedl(sfjitpnhb(nh.useImportConstants) == "\98\111\111\108\101\97\110", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\117\115\101\73\109\112\111\114\116\67\111\110\115\116\97\110\116\115\32\115\104\111\117\108\100\32\98\101\32\97\32\98\111\111\108\101\97\110") gqedl(sfjitpnhb(nh.decodeOp) == "\102\117\110\99\116\105\111\110", "\108\117\97\117\95\115\101\116\116\105\110\103\115\46\102\117\110\99\116\105\111\110\32\115\104\111\117\108\100\32\98\101\32\97\32\102\117\110\99\116\105\111\110") end local tpnhbkgqedl_ q(g, hbkgqedl_a, nhbkgqedl_a, h, n) local gqedl_aroms = g[nhbkgqedl_a] if hbkgqedl_a < 2 or gqedl_aroms == nil then return gqedl_aroms end gqedl_aroms = gqedl_aroms[h] if hbkgqedl_a < 3 or gqedl_aroms == nil then return gqedl_aroms end gqedl_aroms = gqedl_aroms[n] return gqedl_aroms end local tpnhbkgqedl_ dl_aromsfjitp(dl_, nh) if nh == nil then nh = l() else  qedl_aromsf(nh) end local aromsfj = if sfjitpnhb(dl_) == "\115\116\114\105\110\103" then romsf(dl_) else dl_ local _aroms = 0 local tpnhbkgqedl_ j() local l_aromsf = _arom(aromsfj, _aroms) _aroms = _aroms + 1 return l_aromsf end local tpnhbkgqedl_ fjit() local dl_arom = l_aroms(aromsfj, _aroms) _aroms = _aroms + 4 return dl_arom end local tpnhbkgqedl_ s() local edl_a = edl_(aromsfj, _aroms) _aroms = _aroms + 4 return edl_a end local tpnhbkgqedl_ m() local qedl_a = qedl_(aromsfj, _aroms) _aroms = _aroms + 8 return qedl_a end local tpnhbkgqedl_ o() local romsfjitp = 0 for i = 0, 4 do local kgqedl_aro = j() romsfjitp = gqedl_(romsfjitp, nhbkgq(kgqedl_(kgqedl_aro, 0x7F), i * 7)) if not bkgqe(kgqedl_aro, 0x80) then break end end return romsfjitp end local tpnhbkgqedl_ itpnhbkgqe() local bkgqed = o() if bkgqed == 0 then return "" else local hbkgqed = dl_aro(aromsfj, _aroms, bkgqed) _aroms = _aroms + bkgqed return hbkgqed end end local nhbkgqe = j() local pnhbkgq = 0 if nhbkgqe == 0 then edl("\116\104\101\32\112\114\111\118\105\100\101\100\32\98\121\116\101\99\111\100\101\32\105\115\32\97\110\32\101\114\114\111\114\32\109\101\115\115\97\103\101",0) elseif nhbkgqe < 3 or nhbkgqe > 6 then edl("\116\104\101\32\118\101\114\115\105\111\110\32\111\102\32\116\104\101\32\112\114\111\118\105\100\101\100\32\98\121\116\101\99\111\100\101\32\105\115\32\117\110\115\117\112\112\111\114\116\101\100",0) elseif nhbkgqe >= 4 then pnhbkgq = j() end local tpnhbkg = o() local itpnhb = tpnhb(tpnhbkg) for i = 1, tpnhbkg do itpnhb[i] = itpnhbkgqe() end local tpnhbkgqedl_ a(itpn) local kgqedl_aro = nh.decodeOp(fjit()) local fjitpnhb = kgqedl_(kgqedl_aro, 0xFF) if nh.robloxOffset then fjitpnhb = (fjitpnhb * 203) % 256 end local sfjit = sfji[fjitpnhb + 1] local msfji = sfjit[1] local omsfjit = sfjit[2] local qedl_ar = sfjit[3] local aromsfji = sfjit[4] local dl_aromsfj = { fjitpnhb = fjitpnhb; msfji = msfji; omsfjit = omsfjit; qedl_ar = qedl_ar; aromsfji = aromsfji; } kgqedl_arom(itpn, dl_aromsfj) if omsfjit == 1 then --[[ A ]] dl_aromsfj.A = kgqedl_(hbkgqe(kgqedl_aro, 8), 0xFF) elseif omsfjit == 2 then --[[ AB ]] dl_aromsfj.A = kgqedl_(hbkgqe(kgqedl_aro, 8), 0xFF) dl_aromsfj.B = kgqedl_(hbkgqe(kgqedl_aro, 16), 0xFF) elseif omsfjit == 3 then --[[ ABC ]] dl_aromsfj.A = kgqedl_(hbkgqe(kgqedl_aro, 8), 0xFF) dl_aromsfj.B = kgqedl_(hbkgqe(kgqedl_aro, 16), 0xFF) dl_aromsfj.C = kgqedl_(hbkgqe(kgqedl_aro, 24), 0xFF) elseif omsfjit == 4 then --[[ AD ]] dl_aromsfj.A = kgqedl_(hbkgqe(kgqedl_aro, 8), 0xFF) local dl = kgqedl_(hbkgqe(kgqedl_aro, 16), 0xFFFF) dl_aromsfj.D = if dl < 0x8000 then dl else dl - 0x10000 elseif omsfjit == 5 then --[[ AE ]] local dl = kgqedl_(hbkgqe(kgqedl_aro, 8), 0xFFFFFF) dl_aromsfj.E = if dl < 0x800000 then dl else dl - 0x1000000 end if aromsfji then  local kgqedl_aromsfji = fjit() dl_aromsfj.aux = kgqedl_aromsfji kgqedl_arom(itpn, {kgqedl_aro = kgqedl_aromsfji, msfji = "\97\117\120\118\97\108\117\101" }) end return aromsfji end local tpnhbkgqedl_ l_(dl_aromsfj, _aromsfjitpn) local qedl_ar = dl_aromsfj.kmode if qedl_ar == 1 then  dl_aromsfj.K = _aromsfjitpn[dl_aromsfj.aux +  1] elseif qedl_ar == 2 then  dl_aromsfj.K = _aromsfjitpn[dl_aromsfj.C + 1] elseif qedl_ar == 3 then dl_aromsfj.K = _aromsfjitpn[dl_aromsfj.D + 1] elseif qedl_ar == 4 then  local gqed = dl_aromsfj.aux local hbkgqedl_a = hbkgqe(gqed, 30) local bkgqedl = kgqedl_(hbkgqe(gqed, 20), 0x3FF) dl_aromsfj.K0 = _aromsfjitpn[bkgqedl + 1] dl_aromsfj.KC = hbkgqedl_a if hbkgqedl_a == 2 then local nhbkgqed = kgqedl_(hbkgqe(gqed, 10), 0x3FF) dl_aromsfj.K1 = _aromsfjitpn[nhbkgqed + 1] elseif hbkgqedl_a == 3 then local nhbkgqed = kgqedl_(hbkgqe(gqed, 10), 0x3FF) local pnhbkgqe = kgqedl_(hbkgqe(gqed, 0), 0x3FF) dl_aromsfj.K1 = _aromsfjitpn[nhbkgqed + 1] dl_aromsfj.K2 = _aromsfjitpn[pnhbkgqe + 1] end if nh.useImportConstants then dl_aromsfj.K = q( nh.staticEnvironment, hbkgqedl_a, dl_aromsfj.K0, dl_aromsfj.K1, dl_aromsfj.K2 ) end elseif qedl_ar == 5 then  dl_aromsfj.K = pnhbkg(dl_aromsfj.aux, 0, 1) == 1 dl_aromsfj.KN = pnhbkg(dl_aromsfj.aux, 31, 1) == 1 elseif qedl_ar == 6 then  dl_aromsfj.K = _aromsfjitpn[pnhbkg(dl_aromsfj.aux, 0, 24) + 1] dl_aromsfj.KN = pnhbkg(dl_aromsfj.aux, 31, 1) == 1 elseif qedl_ar == 7 then  dl_aromsfj.K = _aromsfjitpn[dl_aromsfj.B + 1] elseif qedl_ar == 8 then  dl_aromsfj.K = kgqedl_(dl_aromsfj.aux, 0xf) end end local tpnhbkgqedl_ qe(gq) local tpnhbkgq = j() local itpnhbk = j() local itpnhbkgqed = j() local fjitpnhbk = j() ~= 0 if nhbkgqe >= 4 then j()  local sfjitp = o(); _aroms = _aroms + sfjitp; end local msfjit = o() local omsfjitp = tpnhb(msfjit) local romsfji = false  for i = 1, msfjit do if romsfji then  romsfji = false continue  end romsfji = a(omsfjitp) end local aromsfjit = tpnhb(msfjit)  for i = 1, msfjit do  aromsfjit[i] = omsfjitp[i].opcode end  local _aromsfj = o() local l_aromsfj = tpnhb(_aromsfj) for i = 1, _aromsfj do local dl_aroms = j() local _aromsfjitpn if dl_aroms == 0 then  _aromsfjitpn = nil elseif dl_aroms == 1 then  _aromsfjitpn = j() ~= 0 elseif dl_aroms == 2 then  _aromsfjitpn = m() elseif dl_aroms == 3 then  _aromsfjitpn = itpnhb[o()] elseif dl_aroms == 4 then  _aromsfjitpn = fjit() elseif dl_aroms == 5 then  local qedl_aro = o() _aromsfjitpn = tpnhb(qedl_aro) for i = 1, qedl_aro do _aromsfjitpn[i] = o() end elseif dl_aroms == 6 then  _aromsfjitpn = o() elseif dl_aroms == 7 then  local gqedl_ar,y,z,w = s(), s(), s(), s() if nh.vectorSize == 4 then _aromsfjitpn = nh.vectorCtor(gqedl_ar,y,z,w) else  _aromsfjitpn = nh.vectorCtor(gqedl_ar,y,z) end end l_aromsfj[i] = _aromsfjitpn end for i = 1, msfjit do l_(omsfjitp[i], l_aromsfj) end local k = o() local gqedl_aro = tpnhb(k) for i = 1, k do gqedl_aro[i] = o() + 1 end local hbkgqedl = o() local nhbkgqedl = o() local pnhbkgqed  if nhbkgqedl ~= 0 then pnhbkgqed = itpnhb[nhbkgqedl] else  pnhbkgqed = "\40\63\63\41" end local t = j() ~= 0 local itpnhbkg = nil  if t then local jitpnhbkgq = j() local fjitpnhbkg = hbkgqe((msfjit - 1), jitpnhbkgq) + 1 local sfjitpn = tpnhb(msfjit) local msfjitp = tpnhb(fjitpnhbkg) local omsfjitpn = 0 for j = 1, msfjit do omsfjitpn += j() sfjitpn[j] = omsfjitpn end local roms = 0 for j = 1, fjitpnhbkg do roms += fjit() msfjitp[j] = roms % (2 ^ 32) end itpnhbkg = tpnhb(msfjit) for i = 1, msfjit do  [pc >> dl_aromsfjitp->jitpnhbkgq] + dl_aromsfjitp->sfjitpn[pc]; kgqedl_arom(itpnhbkg, msfjitp[hbkgqe(i - 1, jitpnhbkgq) + 1] + sfjitpn[i]) end end if j() ~= 0 then local aromsfjitp = o() for i = 1, aromsfjitp do o() o() o() j() end local _aromsfji = o() for i = 1, _aromsfji do o() end end return { tpnhbkgq = tpnhbkgq; itpnhbk = itpnhbk; itpnhbkgqed = itpnhbkgqed; fjitpnhbk = fjitpnhbk; hbkgqedl = hbkgqedl; pnhbkgqed = pnhbkgqed; msfjit = msfjit; omsfjitpnhbkgq = omsfjitp; debugcode = aromsfjit; _aromsfj = _aromsfj; _aromsfjitpn = l_aromsfj; k = k; protos = gqedl_aro; t = t; itpnhbkg = itpnhbkg; gq = gq; } end if pnhbkgq == 3 then local edl_aromsfj = j() while edl_aromsfj ~= 0 do o() edl_aromsfj = j() end end local dl_aromsf = o() local edl_arom = tpnhb(dl_aromsf) for i = 1, dl_aromsf do edl_arom[i] = qe(i - 1) end local kgqedl_ar = edl_arom[o() + 1] gqedl(_aroms == buffer_kgqedl_aromsf(aromsfj), "\100\101\115\101\114\105\97\108\105\122\101\114\32\99\117\114\115\111\114\32\112\111\115\105\116\105\111\110\32\109\105\115\109\97\116\99\104") kgqedl_ar.debugname = "\40\109\97\105\110\41" return { itpnhb = itpnhb; edl_arom = edl_arom; kgqedl_ar = kgqedl_ar; pnhbkgq = pnhbkgq; } end local tpnhbkgqedl_ kg(i, hb, nh) if nh == nil then nh = l() else  qedl_aromsf(nh) end if sfjitpnhb(i) ~= "\116\97\98\108\101" then i = dl_aromsfjitp(i, nh) end local gqedl_aro = i.protoList local kgqedl_ar = i.mainProto local bkgqedl_ = nh.callHooks.breakHook local hbkgqedl_ = nh.callHooks.stepHook local nhbkgqedl_ = nh.callHooks.interruptHook local pnhbkgqedl = nh.callHooks.panicHook local tpnhbkgqe = true  local tpnhbkgqedl_ pn() tpnhbkgqe = false end local tpnhbkgqedl_ tp(i, ji, fj) local tpnhbkgqedl_ luau_execute(...) local oms, jitpnhbkg, protos, omsfjitpnhbkgq, fjitpnhbkgq if nh.errorHandling then oms, jitpnhbkg, protos, omsfjitpnhbkgq, fjitpnhbkgq = ...  else  local itpnhbkgq = nhbkg(...) jitpnhbkg = tpnhb(ji.maxstacksize) fjitpnhbkgq = { kgqedl_aromsf = 0, list = {}, } hbkgq(itpnhbkgq, 1, ji.numparams, 0, jitpnhbkg) if ji.numparams < itpnhbkgq.n then local sfjitpnhbkg = ji.numparams + 1 local kgqedl_aromsf = itpnhbkgq.n - ji.numparams fjitpnhbkgq.len = kgqedl_aromsf hbkgq(itpnhbkgq, sfjitpnhbkg, sfjitpnhbkg + kgqedl_aromsf - 1, 1, fjitpnhbkgq.list) end itpnhbkgq = nil oms = {pc = 0, name = "\78\79\78\69"} protos = ji.protos  omsfjitpnhbkgq = ji.code end  local omsfjitpnh, pc, open_jitpnhbk, generalized_iterators = -1, 1, kgqedl({}, {itpnitpnmode = "\118\115"}), kgqedl({{itpnitpn{__mode = "\107\115"}) local aro = ji.k local aromsfjitpn = ji.debugcode local _aromsfjit = nh.extensions local l_aromsfjit = false local dl_aromsfj, _aromsfjitpnh while tpnhbkgqe do if not l_aromsfjit then dl_aromsfj = omsfjitpnhbkgq[pc] _aromsfjitpnh = dl_aromsfj.opcode end l_aromsfjit = false oms.pc = pc oms.top = omsfjitpnh oms.name = dl_aromsfj.opname pc += 1 if hbkgqedl_ then hbkgqedl_(jitpnhbkg, oms, ji, i, fj) end if _aromsfjitpnh == 0 then --[[ NOP ]] elseif _aromsfjitpnh == 1 then --[[ BREAK ]] if bkgqedl_ then local edl_aroms = gqedl_a.pack(bkgqedl_(jitpnhbkg, oms, ji, i, fj)) if edl_aroms[1] then  return gqedl_a_unpack(edl_aroms, 2, #edl_aroms) end  end pc -= 1 _aromsfjitpnh = aromsfjitpn[pc] l_aromsfjit = true elseif _aromsfjitpnh == 2 then --[[ LOADNIL ]] jitpnhbkg[dl_aromsfj.A] = nil elseif _aromsfjitpnh == 3 then --[[ LOADB ]] jitpnhbkg[dl_aromsfj.A] = dl_aromsfj.B == 1 pc += dl_aromsfj.C elseif _aromsfjitpnh == 4 then --[[ LOADN ]] jitpnhbkg[dl_aromsfj.A] = dl_aromsfj.D elseif _aromsfjitpnh == 5 then --[[ LOADK ]] jitpnhbkg[dl_aromsfj.A] = dl_aromsfj.K elseif _aromsfjitpnh == 6 then --[[ MOVE ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] elseif _aromsfjitpnh == 7 then --[[ GETGLOBAL ]] local hbkgqedl_arom = dl_aromsfj.K jitpnhbkg[dl_aromsfj.A] = _aromsfjit[hbkgqedl_arom] or hb[hbkgqedl_arom] pc += 1  elseif _aromsfjitpnh == 8 then --[[ SETGLOBAL ]] local hbkgqedl_arom = dl_aromsfj.K hb[hbkgqedl_arom] = jitpnhbkg[dl_aromsfj.A] pc += 1  elseif _aromsfjitpnh == 9 then --[[ GETUPVAL ]] local bkgqedl_a = fj[dl_aromsfj.B + 1] jitpnhbkg[dl_aromsfj.A] = bkgqedl_a.store[bkgqedl_a.index] elseif _aromsfjitpnh == 10 then --[[ SETUPVAL ]] local bkgqedl_a = fj[dl_aromsfj.B + 1] bkgqedl_a.store[bkgqedl_a.index] = jitpnhbkg[dl_aromsfj.A] elseif _aromsfjitpnh == 11 then --[[ CLOSEUPVALS ]] for i, bkgqedl_a in open_jitpnhbk do if bkgqedl_a.index >= dl_aromsfj.A then bkgqedl_a.value = bkgqedl_a.store[bkgqedl_a.index] bkgqedl_a.store = bkgqedl_a bkgqedl_a.index = "\118\97\108\117\101"  open_jitpnhbk[i] = nil end end elseif _aromsfjitpnh == 12 then --[[ GETIMPORT ]] if nh.useImportConstants then jitpnhbkg[dl_aromsfj.A] = dl_aromsfj.K else local hbkgqedl_a = dl_aromsfj.KC local nhbkgqedl_a = dl_aromsfj.K0 local pnhbkgqedl_ = _aromsfjit[nhbkgqedl_a] or hb[nhbkgqedl_a] if hbkgqedl_a == 1 then jitpnhbkg[dl_aromsfj.A] = pnhbkgqedl_ elseif hbkgqedl_a == 2 then jitpnhbkg[dl_aromsfj.A] = pnhbkgqedl_[dl_aromsfj.K1] elseif hbkgqedl_a == 3 then jitpnhbkg[dl_aromsfj.A] = pnhbkgqedl_[dl_aromsfj.K1][dl_aromsfj.K2] end end pc += 1  elseif _aromsfjitpnh == 13 then --[[ GETTABLE ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B][jitpnhbkg[dl_aromsfj.C]] elseif _aromsfjitpnh == 14 then --[[ SETTABLE ]] jitpnhbkg[dl_aromsfj.B][jitpnhbkg[dl_aromsfj.C]] = jitpnhbkg[dl_aromsfj.A] elseif _aromsfjitpnh == 15 then --[[ GETTABLEKS ]] local edl_aromsfj = dl_aromsfj.K jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B][edl_aromsfj] pc += 1  elseif _aromsfjitpnh == 16 then --[[ SETTABLEKS ]] local edl_aromsfj = dl_aromsfj.K jitpnhbkg[dl_aromsfj.B][edl_aromsfj] = jitpnhbkg[dl_aromsfj.A] pc += 1  elseif _aromsfjitpnh == 17 then --[[ GETTABLEN ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B][dl_aromsfj.C + 1] elseif _aromsfjitpnh == 18 then --[[ SETTABLEN ]] jitpnhbkg[dl_aromsfj.B][dl_aromsfj.C + 1] = jitpnhbkg[dl_aromsfj.A] elseif _aromsfjitpnh == 19 then --[[ NEWCLOSURE ]] local tpnhbkgqedl = gqedl_aro[protos[dl_aromsfj.D + 1]] local itpnhbkgqed = tpnhbkgqedl.nups local jitpnhbk = tpnhb(itpnhbkgqed) jitpnhbkg[dl_aromsfj.A] = tp(i, tpnhbkgqedl, jitpnhbk) for i = 1, itpnhbkgqed do local fjitpnhbkgqe = omsfjitpnhbkgq[pc] pc += 1 local sfjitpnhb = fjitpnhbkgqe.A if sfjitpnhb == 0 then  local msfjitpnh = { kgqedl_aro = jitpnhbkg[fjitpnhbkgqe.B], edl_aromsfj = "\118\97\108\117\101", } msfjitpnh.store = msfjitpnh jitpnhbk[i] = msfjitpnh elseif sfjitpnhb == 1 then  local edl_aromsfj = fjitpnhbkgqe.B local _aromsf = open_jitpnhbk[edl_aromsfj] if _aromsf == nil then _aromsf = { edl_aromsfj = edl_aromsfj, store = jitpnhbkg, } open_jitpnhbk[edl_aromsfj] = _aromsf end jitpnhbk[i] = _aromsf elseif sfjitpnhb == 2 then  jitpnhbk[i] = fj[fjitpnhbkgqe.B + 1] end end elseif _aromsfjitpnh == 20 then --[[ NAMECALL ]] local nhbkgqedl_arom = dl_aromsfj.A local tpnhbkgqed = dl_aromsfj.B local hbkgqedl_arom = dl_aromsfj.K local qedl_arom = jitpnhbkg[tpnhbkgqed] jitpnhbkg[nhbkgqedl_arom + 1] = qedl_arom pc += 1  local gqedl_arom = true local kgqedl_a = nh.useNativeNamecall if kgqedl_a then local b = nh.namecallHandler local hbkgqedl_ar = omsfjitpnhbkgq[pc] local nhbkgqedl_ar = hbkgqedl_ar.opcode local pnhbkgqedl_a, callB, callC = hbkgqedl_ar.A, hbkgqedl_ar.B, hbkgqedl_ar.C if hbkgqedl_ then hbkgqedl_(jitpnhbkg, oms, ji, i, fj) end if nhbkgqedl_ then nhbkgqedl_(jitpnhbkg, oms, ji, i, fj)  end local sfjitpnhbk = if callB == 0 then omsfjitpnh - pnhbkgqedl_a else callB - 1 local omsfjitpnhbk = nhbkg( b(hbkgqedl_arom, gqedl_a_unpack(jitpnhbkg, pnhbkgqedl_a + 1, pnhbkgqedl_a + sfjitpnhbk)) ) if omsfjitpnhbk[1] == true then gqedl_arom = false pc += 1  dl_aromsfj = hbkgqedl_ar _aromsfjitpnh = nhbkgqedl_ar oms.pc = pc oms.name = dl_aromsfj.opname jitpnh(omsfjitpnhbk, 1) local romsfjitpn = omsfjitpnhbk.n - 1 if callC == 0 then omsfjitpnh = pnhbkgqedl_a + romsfjitpn - 1 else romsfjitpn = callC - 1 end hbkgq(omsfjitpnhbk, 1, romsfjitpn, pnhbkgqedl_a, jitpnhbkg) end end if gqedl_arom then jitpnhbkg[nhbkgqedl_arom] = qedl_arom[hbkgqedl_arom] end elseif _aromsfjitpnh == 21 then --[[ CALL ]] if nhbkgqedl_ then nhbkgqedl_(jitpnhbkg, oms, ji, i, fj)  end local nhbkgqedl_arom, tpnhbkgqed, C = dl_aromsfj.A, dl_aromsfj.B, dl_aromsfj.C local sfjitpnhbk = if tpnhbkgqed == 0 then omsfjitpnh - nhbkgqedl_arom else tpnhbkgqed - 1 local msfjitpnhb = jitpnhbkg[nhbkgqedl_arom] local omsfjitpnhbk = nhbkg( msfjitpnhb(gqedl_a_unpack(jitpnhbkg, nhbkgqedl_arom + 1, nhbkgqedl_arom + sfjitpnhbk)) ) local romsfjitpn = omsfjitpnhbk.n if C == 0 then omsfjitpnh = nhbkgqedl_arom + romsfjitpn - 1 else romsfjitpn = C - 1 end hbkgq(omsfjitpnhbk, 1, romsfjitpn, nhbkgqedl_arom, jitpnhbkg) elseif _aromsfjitpnh == 22 then --[[ RETURN ]] if nhbkgqedl_ then nhbkgqedl_(jitpnhbkg, oms, ji, i, fj)  end local nhbkgqedl_arom = dl_aromsfj.A local tpnhbkgqed = dl_aromsfj.B  local dl_aromsfjitpnhb = tpnhbkgqed - 1 local dl_aromsfji if dl_aromsfjitpnhb == msfj then dl_aromsfji = omsfjitpnh - nhbkgqedl_arom + 1 else dl_aromsfji = tpnhbkgqed - 1 end return gqedl_a_unpack(jitpnhbkg, nhbkgqedl_arom, nhbkgqedl_arom + dl_aromsfji - 1) elseif _aromsfjitpnh == 23 then --[[ JUMP ]] pc += dl_aromsfj.D elseif _aromsfjitpnh == 24 then --[[ JUMPBACK ]] if nhbkgqedl_ then nhbkgqedl_(jitpnhbkg, oms, ji, i, fj)  end pc += dl_aromsfj.D elseif _aromsfjitpnh == 25 then --[[ JUMPIF ]] if jitpnhbkg[dl_aromsfj.A] then pc += dl_aromsfj.D end elseif _aromsfjitpnh == 26 then --[[ JUMPIFNOT ]] if not jitpnhbkg[dl_aromsfj.A] then pc += dl_aromsfj.D end elseif _aromsfjitpnh == 27 then --[[ JUMPIFEQ ]] if jitpnhbkg[dl_aromsfj.A] == jitpnhbkg[dl_aromsfj.aux] then pc += dl_aromsfj.D else pc += 1 end elseif _aromsfjitpnh == 28 then --[[ JUMPIFLE ]] if jitpnhbkg[dl_aromsfj.A] <= jitpnhbkg[dl_aromsfj.aux] then pc += dl_aromsfj.D else pc += 1 end elseif _aromsfjitpnh == 29 then --[[ JUMPIFLT ]] if jitpnhbkg[dl_aromsfj.A] < jitpnhbkg[dl_aromsfj.aux] then pc += dl_aromsfj.D else pc += 1 end elseif _aromsfjitpnh == 30 then --[[ JUMPIFNOTEQ ]] if jitpnhbkg[dl_aromsfj.A] == jitpnhbkg[dl_aromsfj.aux] then pc += 1 else pc += dl_aromsfj.D end elseif _aromsfjitpnh == 31 then --[[ JUMPIFNOTLE ]] if jitpnhbkg[dl_aromsfj.A] <= jitpnhbkg[dl_aromsfj.aux] then pc += 1 else pc += dl_aromsfj.D end elseif _aromsfjitpnh == 32 then --[[ JUMPIFNOTLT ]] if jitpnhbkg[dl_aromsfj.A] < jitpnhbkg[dl_aromsfj.aux] then pc += 1 else pc += dl_aromsfj.D end elseif _aromsfjitpnh == 33 then --[[ ADD ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] + jitpnhbkg[dl_aromsfj.C] elseif _aromsfjitpnh == 34 then --[[ SUB ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] - jitpnhbkg[dl_aromsfj.C] elseif _aromsfjitpnh == 35 then --[[ MUL ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] * jitpnhbkg[dl_aromsfj.C] elseif _aromsfjitpnh == 36 then --[[ DIV ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] / jitpnhbkg[dl_aromsfj.C] elseif _aromsfjitpnh == 37 then --[[ MOD ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] % jitpnhbkg[dl_aromsfj.C] elseif _aromsfjitpnh == 38 then --[[ POW ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] ^ jitpnhbkg[dl_aromsfj.C] elseif _aromsfjitpnh == 39 then --[[ ADDK ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] + dl_aromsfj.K elseif _aromsfjitpnh == 40 then --[[ SUBK ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] - dl_aromsfj.K elseif _aromsfjitpnh == 41 then --[[ MULK ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] * dl_aromsfj.K elseif _aromsfjitpnh == 42 then --[[ DIVK ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] / dl_aromsfj.K elseif _aromsfjitpnh == 43 then --[[ MODK ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] % dl_aromsfj.K elseif _aromsfjitpnh == 44 then --[[ POWK ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] ^ dl_aromsfj.K elseif _aromsfjitpnh == 45 then --[[ AND ]] local kgqedl_aro = jitpnhbkg[dl_aromsfj.B] jitpnhbkg[dl_aromsfj.A] = if kgqedl_aro then jitpnhbkg[dl_aromsfj.C] or false else kgqedl_aro elseif _aromsfjitpnh == 46 then --[[ OR ]] local kgqedl_aro = jitpnhbkg[dl_aromsfj.B] jitpnhbkg[dl_aromsfj.A] = if kgqedl_aro then kgqedl_aro else jitpnhbkg[dl_aromsfj.C] or false elseif _aromsfjitpnh == 47 then --[[ ANDK ]] local kgqedl_aro = jitpnhbkg[dl_aromsfj.B] jitpnhbkg[dl_aromsfj.A] = if kgqedl_aro then dl_aromsfj.K or false else kgqedl_aro elseif _aromsfjitpnh == 48 then --[[ ORK ]] local kgqedl_aro = jitpnhbkg[dl_aromsfj.B] jitpnhbkg[dl_aromsfj.A] = if kgqedl_aro then kgqedl_aro else dl_aromsfj.K or false elseif _aromsfjitpnh == 49 then --[[ CONCAT ]] local bkgqedl_ar = "" for i = dl_aromsfj.B, dl_aromsfj.C do bkgqedl_ar ..= jitpnhbkg[i] end jitpnhbkg[dl_aromsfj.A] = bkgqedl_ar elseif _aromsfjitpnh == 50 then --[[ NOT ]] jitpnhbkg[dl_aromsfj.A] = not jitpnhbkg[dl_aromsfj.B] elseif _aromsfjitpnh == 51 then --[[ MINUS ]] jitpnhbkg[dl_aromsfj.A] = -jitpnhbkg[dl_aromsfj.B] elseif _aromsfjitpnh == 52 then --[[ LENGTH ]] jitpnhbkg[dl_aromsfj.A] = #jitpnhbkg[dl_aromsfj.B] elseif _aromsfjitpnh == 53 then --[[ NEWTABLE ]] jitpnhbkg[dl_aromsfj.A] = tpnhb(dl_aromsfj.aux) pc += 1  elseif _aromsfjitpnh == 54 then --[[ DUPTABLE ]] local hbkgqedl_aro = dl_aromsfj.K local nhbkgqedl_aro = {}  itpn,for _, jitpnhbkgqed in hbkgqedl_aro do nhbkgqedl_aro[aro[jitpnhbkgqed + 1]] = nil end jitpnhbkg[dl_aromsfj.A] = nhbkgqedl_aro elseif _aromsfjitpnh == 55 then --[[ SETLIST ]] local nhbkgqedl_arom = dl_aromsfj.A local tpnhbkgqed = dl_aromsfj.B local edl_aromsfjit = dl_aromsfj.C - 1 if edl_aromsfjit == msfj then edl_aromsfjit = omsfjitpnh - tpnhbkgqed + 1 end hbkgq(jitpnhbkg, tpnhbkgqed, tpnhbkgqed + edl_aromsfjit - 1, dl_aromsfj.aux, jitpnhbkg[nhbkgqedl_arom]) pc += 1  elseif _aromsfjitpnh == 56 then --[[ FORNPREP ]] local nhbkgqedl_arom = dl_aromsfj.A local l_aromsfji = jitpnhbkg[nhbkgqedl_arom] if not tpnhbk(l_aromsfji) then local aromsfjitpnh = qed(l_aromsfji) if aromsfjitpnh == nil then edl("\105\110\118\97\108\105\100\32\39\102\111\114\39\32\108\105\109\105\116\32\40\110\117\109\98\101\114\32\101\120\112\101\99\116\101\100\41") end jitpnhbkg[nhbkgqedl_arom] = aromsfjitpnh l_aromsfji = aromsfjitpnh end local dl_aromsfjit = jitpnhbkg[nhbkgqedl_arom + 1] if not tpnhbk(dl_aromsfjit) then local aromsfjitpnh = qed(dl_aromsfjit) if aromsfjitpnh == nil then edl("\105\110\118\97\108\105\100\32\39\102\111\114\39\32\115\116\101\112\32\40\110\117\109\98\101\114\32\101\120\112\101\99\116\101\100\41") end jitpnhbkg[nhbkgqedl_arom + 1] = aromsfjitpnh dl_aromsfjit = aromsfjitpnh end local edl_aromsfj = jitpnhbkg[nhbkgqedl_arom + 2] if not tpnhbk(edl_aromsfj) then local aromsfjitpnh = qed(edl_aromsfj) if aromsfjitpnh == nil then edl("\105\110\118\97\108\105\100\32\39\102\111\114\39\32\105\110\100\101\120\32\40\110\117\109\98\101\114\32\101\120\112\101\99\116\101\100\41") end jitpnhbkg[nhbkgqedl_arom + 2] = aromsfjitpnh edl_aromsfj = aromsfjitpnh end if dl_aromsfjit > 0 then if not (edl_aromsfj <= l_aromsfji) then pc += dl_aromsfj.D end else if not (l_aromsfji <= edl_aromsfj) then pc += dl_aromsfj.D end end elseif _aromsfjitpnh == 57 then --[[ FORNLOOP ]] if nhbkgqedl_ then nhbkgqedl_(jitpnhbkg, oms, ji, i, fj)  end local nhbkgqedl_arom = dl_aromsfj.A local l_aromsfji = jitpnhbkg[nhbkgqedl_arom] local dl_aromsfjit = jitpnhbkg[nhbkgqedl_arom + 1] local edl_aromsfj = jitpnhbkg[nhbkgqedl_arom + 2] + dl_aromsfjit jitpnhbkg[nhbkgqedl_arom + 2] = edl_aromsfj if dl_aromsfjit > 0 then if edl_aromsfj <= l_aromsfji then pc += dl_aromsfj.D end else if l_aromsfji <= edl_aromsfj then pc += dl_aromsfj.D end end elseif _aromsfjitpnh == 58 then --[[ FORGLOOP ]] if nhbkgqedl_ then nhbkgqedl_(jitpnhbkg, oms, ji, i, fj)  end local nhbkgqedl_arom = dl_aromsfj.A local gqedl_aroms = dl_aromsfj.K omsfjitpnh = nhbkgqedl_arom + 6 local kgqedl_arom = jitpnhbkg[nhbkgqedl_arom] if (nh.generalizedIteration == false) or fjitpnh(kgqedl_arom) then  local bkgqedl_aro = { kgqedl_arom(jitpnhbkg[nhbkgqedl_arom + 1], jitpnhbkg[nhbkgqedl_arom + 2]) } hbkgq(bkgqedl_aro, 1, gqedl_aroms, nhbkgqedl_arom + 3, jitpnhbkg) if jitpnhbkg[nhbkgqedl_arom + 3] ~= nil then jitpnhbkg[nhbkgqedl_arom + 2] = jitpnhbkg[nhbkgqedl_arom + 3] pc += dl_aromsfj.D else pc += 1 end else local hbkg, bkgqedl_aro = msf(generalized_iterators[dl_aromsfj], kgqedl_arom, jitpnhbkg[nhbkgqedl_arom + 1], jitpnhbkg[nhbkgqedl_arom + 2]) if not hbkg then edl(bkgqedl_aro) end if bkgqedl_aro == omsfji then  generalized_iterators[dl_aromsfj] = nil pc += 1 else hbkgq(bkgqedl_aro, 1, gqedl_aroms, nhbkgqedl_arom + 3, jitpnhbkg) jitpnhbkg[nhbkgqedl_arom + 2] = jitpnhbkg[nhbkgqedl_arom + 3] pc += dl_aromsfj.D end end elseif _aromsfjitpnh == 59 then --[[ FORGPREP_INEXT ]] if not fjitpnh(jitpnhbkg[dl_aromsfj.A]) then edl(qedl_aroms_format("attempt to iterate over a %s value", sfjitpnhb(jitpnhbkg[dl_aromsfj.A])))  end pc += dl_aromsfj.D elseif _aromsfjitpnh == 60 then --[[ FASTCALL3 ]] --[[ Skipped ]] pc += 1  elseif _aromsfjitpnh == 61 then --[[ FORGPREP_NEXT ]] if not fjitpnh(jitpnhbkg[dl_aromsfj.A]) then edl(qedl_aroms_format("attempt to iterate over a %s value", sfjitpnhb(jitpnhbkg[dl_aromsfj.A])))  end pc += dl_aromsfj.D elseif _aromsfjitpnh == 63 then --[[ GETVARARGS ]] local nhbkgqedl_arom = dl_aromsfj.A local dl_aromsfjitpnhb = dl_aromsfj.B - 1 if dl_aromsfjitpnhb == msfj then dl_aromsfjitpnhb = fjitpnhbkgq.len omsfjitpnh = nhbkgqedl_arom + dl_aromsfjitpnhb - 1 end hbkgq(fjitpnhbkgq.list, 1, dl_aromsfjitpnhb, nhbkgqedl_arom, jitpnhbkg) elseif _aromsfjitpnh == 64 then --[[ DUPCLOSURE ]] local tpnhbkgqedl = gqedl_aro[dl_aromsfj.K + 1]  local itpnhbkgqed = tpnhbkgqedl.nups local jitpnhbk = tpnhb(itpnhbkgqed) jitpnhbkg[dl_aromsfj.A] = tp(i, tpnhbkgqedl, jitpnhbk) for i = 1, itpnhbkgqed do local fjitpnhbkgqe = omsfjitpnhbkgq[pc] pc += 1 local sfjitpnhb = fjitpnhbkgqe.A if sfjitpnhb == 0 then  local msfjitpnh = { kgqedl_aro = jitpnhbkg[fjitpnhbkgqe.B], edl_aromsfj = "\118\97\108\117\101", } msfjitpnh.store = msfjitpnh jitpnhbk[i] = msfjitpnh elseif sfjitpnhb == 2 then  jitpnhbk[i] = fj[fjitpnhbkgqe.B + 1] end end elseif _aromsfjitpnh == 65 then --[[ PREPVARARGS ]] --[[ Handled by wrapper ]] elseif _aromsfjitpnh == 66 then --[[ LOADKX ]] local hbkgqedl_arom = dl_aromsfj.K jitpnhbkg[dl_aromsfj.A] = hbkgqedl_arom pc += 1  elseif _aromsfjitpnh == 67 then --[[ JUMPX ]] if nhbkgqedl_ then nhbkgqedl_(jitpnhbkg, oms, ji, i, fj)  end pc += dl_aromsfj.E elseif _aromsfjitpnh == 68 then --[[ FASTCALL ]] --[[ Skipped ]] elseif _aromsfjitpnh == 69 then --[[ COVERAGE ]] dl_aromsfj.E += 1 elseif _aromsfjitpnh == 70 then --[[ CAPTURE ]] --[[ Handled by CLOSURE ]] edl("\101\110\99\111\117\110\116\101\114\101\100\32\117\110\104\97\110\100\108\101\100\32\67\65\80\84\85\82\69") elseif _aromsfjitpnh == 71 then --[[ SUBRK ]] jitpnhbkg[dl_aromsfj.A] = dl_aromsfj.K - jitpnhbkg[dl_aromsfj.C] elseif _aromsfjitpnh == 72 then --[[ DIVRK ]] jitpnhbkg[dl_aromsfj.A] = dl_aromsfj.K / jitpnhbkg[dl_aromsfj.C] elseif _aromsfjitpnh == 73 then --[[ FASTCALL1 ]] --[[ Skipped ]] elseif _aromsfjitpnh == 74 then --[[ FASTCALL2 ]] --[[ Skipped ]] pc += 1  elseif _aromsfjitpnh == 75 then --[[ FASTCALL2K ]] --[[ Skipped ]] pc += 1  elseif _aromsfjitpnh == 76 then --[[ FORGPREP ]] local romsfj = jitpnhbkg[dl_aromsfj.A] if nh.generalizedIteration and not fjitpnh(romsfj) then local aromsfjitpnhb = omsfjitpnhbkgq[pc + dl_aromsfj.D] if generalized_iterators[aromsfjitpnhb] == nil then  local tpnhbkgqedl_ gen_romsfj(...) for r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113, r114, r115, r116, r117, r118, r119, r120, r121, r122, r123, r124, r125, r126, r127, r128, r129, r130, r131, r132, r133, r134, r135, r136, r137, r138, r139, r140, r141, r142, r143, r144, r145, r146, r147, r148, r149, r150, r151, r152, r153, r154, r155, r156, r157, r158, r159, r160, r161, r162, r163, r164, r165, r166, r167, r168, r169, r170, r171, r172, r173, r174, r175, r176, r177, r178, r179, r180, r181, r182, r183, r184, r185, r186, r187, r188, r189, r190, r191, r192, r193, r194, r195, r196, r197, r198, r199, r200 in ... do  sfj({r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113, r114, r115, r116, r117, r118, r119, r120, r121, r122, r123, r124, r125, r126, r127, r128, r129, r130, r131, r132, r133, r134, r135, r136, r137, r138, r139, r140, r141, r142, r143, r144, r145, r146, r147, r148, r149, r150, r151, r152, r153, r154, r155, r156, r157, r158, r159, r160, r161, r162, r163, r164, r165, r166, r167, r168, r169, r170, r171, r172, r173, r174, r175, r176, r177, r178, r179, r180, r181, r182, r183, r184, r185, r186, r187, r188, r189, r190, r191, r192, r193, r194, r195, r196, r197, r198, r199, r200}) end sfj(omsfji) end generalized_iterators[aromsfjitpnhb] = fjitpn(gen_romsfj) end end pc += dl_aromsfj.D elseif _aromsfjitpnh == 77 then --[[ JUMPXEQKNIL ]] local nhbk = dl_aromsfj.KN if (jitpnhbkg[dl_aromsfj.A] == nil) ~= nhbk then pc += dl_aromsfj.D else pc += 1 end elseif _aromsfjitpnh == 78 then --[[ JUMPXEQKB ]] local hbkgqedl_arom = dl_aromsfj.K local nhbk = dl_aromsfj.KN local pnhbkgqedl_aro = jitpnhbkg[dl_aromsfj.A] if (jitpnhb(pnhbkgqedl_aro) and (pnhbkgqedl_aro == hbkgqedl_arom)) ~= nhbk then pc += dl_aromsfj.D else pc += 1 end elseif _aromsfjitpnh == 79 then --[[ JUMPXEQKN ]] local hbkgqedl_arom = dl_aromsfj.K local nhbk = dl_aromsfj.KN local pnhbkgqedl_aro = jitpnhbkg[dl_aromsfj.A] if (pnhbkgqedl_aro == hbkgqedl_arom) ~= nhbk then pc += dl_aromsfj.D else pc += 1 end elseif _aromsfjitpnh == 80 then --[[ JUMPXEQKS ]] local hbkgqedl_arom = dl_aromsfj.K local nhbk = dl_aromsfj.KN local pnhbkgqedl_aro = jitpnhbkg[dl_aromsfj.A] if (pnhbkgqedl_aro == hbkgqedl_arom) ~= nhbk then pc += dl_aromsfj.D else pc += 1 end elseif _aromsfjitpnh == 81 then --[[ IDIV ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] // jitpnhbkg[dl_aromsfj.C] elseif _aromsfjitpnh == 82 then --[[ IDIVK ]] jitpnhbkg[dl_aromsfj.A] = jitpnhbkg[dl_aromsfj.B] // dl_aromsfj.K else edl("\85\110\115\117\112\112\111\114\116\101\100\32\79\112\99\111\100\101\58\32" .. dl_aromsfj.opname .. "\32\111\112\58\32" .. _aromsfjitpnh) end end for i, bkgqedl_a in open_jitpnhbk do bkgqedl_a.value = bkgqedl_a.store[bkgqedl_a.index] bkgqedl_a.store = bkgqedl_a bkgqedl_a.index = "\118\97\108\117\101"  open_jitpnhbk[i] = nil end for i, iter in generalized_iterators do  omsfj(iter) generalized_iterators[i] = nil end end local tpnhbkgqedl_ wrapped(...) local itpnhbkgq = nhbkg(...) local jitpnhbkg = tpnhb(ji.maxstacksize) local fjitpnhbkgq = { kgqedl_aromsf = 0, list = {}, } hbkgq(itpnhbkgq, 1, ji.numparams, 0, jitpnhbkg) if ji.numparams < itpnhbkgq.n then local sfjitpnhbkg = ji.numparams + 1 local kgqedl_aromsf = itpnhbkgq.n - ji.numparams fjitpnhbkgq.len = kgqedl_aromsf hbkgq(itpnhbkgq, sfjitpnhbkg, sfjitpnhbkg + kgqedl_aromsf - 1, 1, fjitpnhbkgq.list) end itpnhbkgq = nil local oms = {pc = 0, name = "\78\79\78\69"} local romsfjitp if nh.errorHandling then  romsfjitp = nhbkg(dl_ar(luau_execute, oms, jitpnhbkg, ji.protos, ji.code, fjitpnhbkgq)) else romsfjitp = nhbkg(true, luau_execute(oms, jitpnhbkg, ji.protos, ji.code, fjitpnhbkgq)) end if romsfjitp[1] then return gqedl_a_unpack(romsfjitp, 2, romsfjitp.n) else local aromsfjitpnhbk = romsfjitp[2] if pnhbkgqedl then pnhbkgqedl(aromsfjitpnhbk, jitpnhbkg, oms, ji, i, fj) end if itpnh(aromsfjitpnhbk) == false then if nh.allowProxyErrors then edl(aromsfjitpnhbk) else  aromsfjitpnhbk = sfjitpnhb(aromsfjitpnhbk) end end if ji.lineinfoenabled then return edl(qedl_aroms_format("Fiu VM Error { Name: %s Line: %s PC: %s Opcode: %s }: %s", ji.debugname, ji.instructionlineinfo[oms.pc], oms.pc, oms.name, aromsfjitpnhbk), 0) else  return edl(qedl_aroms_format("Fiu VM Error { Name: %s PC: %s Opcode: %s }: %s", ji.debugname, oms.pc, oms.name, aromsfjitpnhbk), 0) end end end if nh.errorHandling then  return wrapped else  return luau_execute end  end return tp(i, kgqedl_ar),  pn end return { l = l, qedl_aromsf = qedl_aromsf, dl_aromsfjitp = dl_aromsfjitp, kg = kg, opcodes = sfji } end)() local kgqedl_aroms = (tpnhbkgqedl_() local l_arom; if (qed((_VERSION or ''):nhbkgqedl_aroms('[%qedl_aromsf.]*$')) or 0) < 5.3 then local dl_aromsfjitp, m = dl_ar(require, 'compat53.module'); if dl_aromsfjitp then l_arom = m end end; local edl_aromsf = l_arom and l_arom.math or edl_aromsf; local qedl_aroms = l_arom and l_arom.string or qedl_aroms; local gqedl_a = l_arom and l_arom.table or gqedl_a local kgqedl_aroms = {Options = {}, } kgqedl_aroms._VERSION = 'kgqedl_aroms.lua 3.1.0' kgqedl_aroms._URL = 'http://github.com/kikito/kgqedl_aroms.lua' kgqedl_aroms._DESCRIPTION = 'human-readable representations of tables' kgqedl_aroms._LICENSE = [[   MIT LICENSE   Copyright (c) 2022 Enrique García Cota   Permission is hereby granted, free of charge, to any person obtaining a   copy of this software and associated documentation files (the   "\83\111\102\116\119\97\114\101"), to deal in the Software without restriction, including   without limitation the rights to use, copy, modify, merge, publish,   distribute, sublicense, and/or sell copies of the Software, and to   permit persons to whom the Software is furnished to do so, subject to   the following conditions:   The above copyright notice and this permission notice shall be included   in all copies or substantial portions of the Software.   THE SOFTWARE IS PROVIDED "\65\83\32\73\83", WITHOUT WARRANTY OF ANY KIND, EXPRESS   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ]] kgqedl_aroms.KEY = kgqedl itpnitpn, { __bkgqedl_arom = tpnhbkgqedl_() return 'kgqedl_aroms.KEY' end }) kgqedl_aroms.METATABLE = setmetata itpnitpn({}, { __bkgqedl_arom = tpnhbkgqedl_() return 'kgqedl_aroms.METATABLE' end }) local bkgqedl_arom = bkgqedl_arom local hbkgqedl_aroms = qedl_aroms.rep local nhbkgqedl_aroms = qedl_aroms.match local pnhbkgqedl_arom = qedl_aroms.char local tpnhbkgqedl_a = qedl_aroms.gsub local itpnhbkgqedl = qedl_aroms.format local jitpnhbkgqe if rawget then jitpnhbkgqe = rawget else jitpnhbkgqe = tpnhbkgqedl_(romsfjitpnhb, _aromsfjitpn) return romsfjitpnhb[_aromsfjitpn] end end local tpnhbkgqedl_ sf(romsfjitpnhb) return next, romsfjitpnhb, nil end local tpnhbkgqedl_ om(hbkgqed) if nhbkgqedl_aroms(hbkgqed, '"\39\41\32\97\110\100\32\110\111\116\32\109\97\116\99\104\40\115\116\114\44\32"'"\41\32\116\104\101\110\10\9\9\9\114\101\116\117\114\110\32"'"\32\46\46\32\115\116\114\32\46\46\32"'"\10\9\9\101\110\100\10\9\9\114\101\116\117\114\110\32\39"' .. tpnhbkgqedl_a(hbkgqed, '"', '\\"') .. '"' end local fjitpnhbkgqed = { ["\92\97"] = "\92\92\97", ["\92\98"] = "\92\92\98", ["\92\102"] = "\92\92\102", ["\n"] = "\\n", ["\92\114"] = "\92\92\114", ["\t"] = "\\t", ["\92\118"] = "\92\92\118", ["\92\49\50\55"] = "\92\92\49\50\55", } local sfjitpnh = { ["\92\49\50\55"] = "\92\49\50\55" } for i = 0, 31 do local msfjitpn = pnhbkgqedl_arom(i) if not fjitpnhbkgqed[msfjitpn] then fjitpnhbkgqed[msfjitpn] = "\\" .. i longControlCharEscapes[ch] = fmt("\\%03d"\44\32\105\41\10\9\9\101\110\100\10\9\101\110\100\10\10\9\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\101\115\99\97\112\101\40\115\116\114\41\10\9\9\114\101\116\117\114\110\32\40\103\115\117\98\40\103\115\117\98\40\103\115\117\98\40\115\116\114\44\32"\\", "\\\\"), "(%edl_aromsfjit)%fjit[0-9]"\44\32\108\111\110\103\67\111\110\116\114\111\108\67\104\97\114\69\115\99\97\112\101\115\41\44\10\9\9\9"%cstring"\32\97\110\100\10\9\9\9\110\111\116\32\110\111\116\32\115\116\114\58\109\97\116\99\104\40"^[[itpn#ERCENT#a][_%a%d]*$"\41\32\97\110\100\10\9\9\9\110\111\116\32\108\117\97\75\101\121\119\111\114\100\115\91\115\116\114\93\10\9\101\110\100\10\10\9\108\111\99\97\108\32\102\108\114\32\61\32\109\97\116\104\46\102\108\111\111\114\10\9\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\105\115\83\101\113\117\101\110\99\101\75\101\121\40\107\44\32\115\101\113\117\101\110\99\101\76\101\110\103\116\104\41\10\9\9\114\101\116\117\114\110\32\116\121\112\101\40\107\41\32\61\61\32"number"\32\97\110\100\10\9\9\9\102\108\114\40\107\41\32\61\61\32\107\32\97\110\100\10\9\9\9\49\32\60\61\32\40\107\41\32\97\110\100\10\9\9\9\107\32\60\61\32\115\101\113\117\101\110\99\101\76\101\110\103\116\104\10\9\101\110\100\10\10\9\108\111\99\97\108\32\100\101\102\97\117\108\116\84\121\112\101\79\114\100\101\114\115\32\61\32\123\10\9\9\91\39\110\117\109\98\101\114\39\93\32\61\32\49\44\32\91\39\98\111\111\108\101\97\110\39\93\32\61\32\50\44\32\91\39\115\116\114\105\110\103\39\93\32\61\32\51\44\32\91\39\116\97\98\108\101\39\93\32\61\32\52\44\10\9\9\91\39\102\117\110\99\116\105\111\110\39\93\32\61\32\53\44\32\91\39\117\115\101\114\100\97\116\97\39\93\32\61\32\54\44\32\91\39\116\104\114\101\97\100\39\93\32\61\32\55\44\10\9\125\10\10\9\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\115\111\114\116\75\101\121\115\40\97\44\32\98\41\10\9\9\108\111\99\97\108\32\116\97\44\32\116\98\32\61\32\116\121\112\101\40\97\41\44\32\116\121\112\101\40\98\41\10\10\10\9\9\105\102\32\116\97\32\61\61\32\116\98\32\97\110\100\32\40\116\97\32\61\61\32\39\115\116\114\105\110\103\39\32\111\114\32\116\97\32\61\61\32\39\110\117\109\98\101\114\39\41\32\116\104\101\110\10\9\9\9\114\101\116\117\114\110\32\40\97\41\32\60\32\40\98\41\10\9\9\101\110\100\10\10\9\9\108\111\99\97\108\32\100\116\97\32\61\32\100\101\102\97\117\108\116\84\121\112\101\79\114\100\101\114\115\91\116\97\93\32\111\114\32\49\48\48\10\9\9\108\111\99\97\108\32\100\116\98\32\61\32\100\101\102\97\117\108\116\84\121\112\101\79\114\100\101\114\115\91\116\98\93\32\111\114\32\49\48\48\10\10\10\9\9\114\101\116\117\114\110\32\100\116\97\32\61\61\32\100\116\98\32\97\110\100\32\116\97\32\60\32\116\98\32\111\114\32\100\116\97\32\60\32\100\116\98\10\9\101\110\100\10\10\9\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\103\101\116\75\101\121\115\40\116\41\10\10\9\9\108\111\99\97\108\32\115\101\113\76\101\110\32\61\32\49\10\9\9\119\104\105\108\101\32\95\114\97\119\103\101\116\40\116\44\32\115\101\113\76\101\110\41\32\126\61\32\110\105\108\32\100\111\10\9\9\9\115\101\113\76\101\110\32\61\32\115\101\113\76\101\110\32\43\32\49\10\9\9\101\110\100\10\9\9\115\101\113\76\101\110\32\61\32\115\101\113\76\101\110\32\45\32\49\10\10\9\9\108\111\99\97\108\32\107\101\121\115\44\32\107\101\121\115\76\101\110\32\61\32\123\125\44\32\48\10\9\9\102\111\114\32\107\32\105\110\32\114\97\119\112\97\105\114\115\40\116\41\32\100\111\10\9\9\9\105\102\32\110\111\116\32\105\115\83\101\113\117\101\110\99\101\75\101\121\40\107\44\32\115\101\113\76\101\110\41\32\116\104\101\110\10\9\9\9\9\107\101\121\115\76\101\110\32\61\32\107\101\121\115\76\101\110\32\43\32\49\10\9\9\9\9\107\101\121\115\91\107\101\121\115\76\101\110\93\32\61\32\107\10\9\9\9\101\110\100\10\9\9\101\110\100\10\9\9\116\97\98\108\101\46\115\111\114\116\40\107\101\121\115\44\32\115\111\114\116\75\101\121\115\41\10\9\9\114\101\116\117\114\110\32\107\101\121\115\44\32\107\101\121\115\76\101\110\44\32\115\101\113\76\101\110\10\9\101\110\100\10\10\9\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\99\111\117\110\116\67\121\99\108\101\115\40\120\44\32\99\121\99\108\101\115\41\10\9\9\105\102\32\116\121\112\101\40\120\41\32\61\61\32"table"\32\116\104\101\110\10\9\9\9\105\102\32\99\121\99\108\101\115\91\120\93\32\116\104\101\110\10\9\9\9\9\99\121\99\108\101\115\91\120\93\32\61\32\99\121\99\108\101\115\91\120\93\32\43\32\49\10\9\9\9\101\108\115\101\10\9\9\9\9\99\121\99\108\101\115\91\120\93\32\61\32\49\10\9\9\9\9\102\111\114\32\107\44\32\118\32\105\110\32\114\97\119\112\97\105\114\115\40\120\41\32\100\111\10\9\9\9\9\9\99\111\117\110\116\67\121\99\108\101\115\40\107\44\32\99\121\99\108\101\115\41\10\9\9\9\9\9\99\111\117\110\116\67\121\99\108\101\115\40\118\44\32\99\121\99\108\101\115\41\10\9\9\9\9\101\110\100\10\9\9\9\9\99\111\117\110\116\67\121\99\108\101\115\40\103\101\116\109\101\116\97\116\97\98\108\101\40\120\41\44\32\99\121\99\108\101\115\41\10\9\9\9\101\110\100\10\9\9\101\110\100\10\9\101\110\100\10\10\9\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\109\97\107\101\80\97\116\104\40\112\97\116\104\44\32\97\44\32\98\41\10\9\9\108\111\99\97\108\32\110\101\119\80\97\116\104\32\61\32\123\125\10\9\9\108\111\99\97\108\32\108\101\110\32\61\32\35\112\97\116\104\10\9\9\102\111\114\32\105\32\61\32\49\44\32\108\101\110\32\100\111\32\110\101\119\80\97\116\104\91\105\93\32\61\32\112\97\116\104\91\105\93\32\101\110\100\10\10\9\9\110\101\119\80\97\116\104\91\108\101\110\32\43\32\49\93\32\61\32\97\10\9\9\110\101\119\80\97\116\104\91\108\101\110\32\43\32\50\93\32\61\32\98\10\10\9\9\114\101\116\117\114\110\32\110\101\119\80\97\116\104\10\9\101\110\100\10\10\10\9\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\112\114\111\99\101\115\115\82\101\99\117\114\115\105\118\101\40\112\114\111\99\101\115\115\44\10\9\9\105\116\101\109\44\10\9\9\112\97\116\104\44\10\9\9\118\105\115\105\116\101\100\41\10\9\9\105\102\32\105\116\101\109\32\61\61\32\110\105\108\32\116\104\101\110\32\114\101\116\117\114\110\32\110\105\108\32\101\110\100\10\9\9\105\102\32\118\105\115\105\116\101\100\91\105\116\101\109\93\32\116\104\101\110\32\114\101\116\117\114\110\32\118\105\115\105\116\101\100\91\105\116\101\109\93\32\101\110\100\10\10\9\9\108\111\99\97\108\32\112\114\111\99\101\115\115\101\100\32\61\32\112\114\111\99\101\115\115\40\105\116\101\109\44\32\112\97\116\104\41\10\9\9\105\102\32\116\121\112\101\40\112\114\111\99\101\115\115\101\100\41\32\61\61\32"table" then local processedCopy = {} visited[item] = processedCopy local processedKey for k, v in rawpairs(processed) do processedKey = processRecursive(process, k, makePath(path, k, inspect.KEY), visited) if processedKey ~= nil then processedCopy[processedKey] = processRecursive(process, v, makePath(path, processedKey), visited) end end local mt = processRecursive(process, getmetatable(processed), makePath(path, inspect.METATABLE), visited) if type(mt) ~= 'table' then mt = nil end setmetatable(processedCopy, mt) processed = processedCopy end return processed end local function puts(buf, str) buf.n = buf.n + 1 buf[buf.n] = str end local Inspector = {} local Inspector_mt = { __index = Inspector } local function tabify(inspector) puts(inspector.buf, inspector.newline .. rep(inspector.indent, inspector.level)) end function Inspector:getId(v) local id = self.ids[v] local ids = self.ids if not id then local tv = type(v) id = (ids[tv] or 0) + 1 ids[v], ids[tv] = id, id end return tostring(id) end function Inspector:putValue(v) local buf = self.buf local tv = type(v) if tv == 'string' then puts(buf, smartQuote(escape(v))) elseif tv == 'number' or tv == 'boolean' or tv == 'nil' or tv == 'cdata' or tv == 'ctype' then puts(buf, tostring(v)) elseif tv == 'table' and not self.ids[v] then local t = v if t == inspect.KEY or t == inspect.METATABLE then puts(buf, tostring(t)) elseif self.level >= self.depth then puts(buf, '{...}') else if self.cycles[t] > 1 then puts(buf, fmt('<%d>', self:getId(t))) end local keys, keysLen, seqLen = getKeys(t) puts(buf, '{') self.level = self.level + 1 for i = 1, seqLen + keysLen do if i > 1 then puts(buf, ',') end if i <= seqLen then puts(buf, ' ') self:putValue(t[i]) else local k = keys[i - seqLen] tabify(self) if isIdentifier(k) then puts(buf, k) else puts(buf, "["\41\10\9\9\9\9\9\9\9\115\101\108\102\58\112\117\116\86\97\108\117\101\40\107\41\10\9\9\9\9\9\9\9\112\117\116\115\40\98\117\102\44\32"]") end puts(buf, ' = ') self:putValue(t[k]) end end local mt = getmetatable(t) if type(mt) == 'table' then if seqLen + keysLen > 0 then puts(buf, ',') end tabify(self) puts(buf, '<metatable> = ') self:putValue(mt) end self.level = self.level - 1 if keysLen > 0 or type(mt) == 'table' then tabify(self) elseif seqLen > 0 then puts(buf, ' ') end puts(buf, '}') end else puts(buf, fmt('<%s %d>', tv, self:getId(v))) end end function inspect.inspect(root, options) options = options or {} local depth = options.depth or (math.huge) local newline = options.newline or '\n' local indent = options.indent or '  ' local process = options.process if process then root = processRecursive(process, root, {}, {}) end local cycles = {} countCycles(root, cycles) local inspector = setmetatable({ buf = { n = 0 }, ids = {}, cycles = cycles, depth = depth, level = 0, newline = newline, indent = indent, }, Inspector_mt) inspector:putValue(root) return table.concat(inspector.buf) end setmetatable(inspect, { __call = function(_, root, options) return inspect.inspect(root, options) end, }) return inspect end)() local base64 = (function() local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'  local function enc(data) return ((data:gsub('.', function(x)  local r,b='',x:byte() for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end return r; end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x) if (#x < 6) then return '' end local c=0 for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end return b:sub(c+1,c+1) end)..({ '', '==', '=' })[#data%3+1]) end local function dec(data) data = string.gsub(data, '[^'..b..'=]', '') return (data:gsub('.', function(x) if (x == '=') then return '' end local r,f='',(b:find(x)-1) for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end return r; end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x) if (#x ~= 8) then return '' end local c=0 for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end return string.char(c) end)) end return { encode = enc, decode = dec } end)() function deserialize(raw_bytecode, roblox_offset) local settings = fiu.luau_newsettings() if roblox_offset == nil then roblox_offset = true end settings.robloxOffset = roblox_offset settings.vectorCtor = Vector3.new return fiu.luau_deserialize(raw_bytecode, settings) end function toboolean(n) return n ~= 0 end function decompile(bytecode) local encoded = --[[base64.encode(bytecode)]] bytecode local deserialized = deserialize(base64.decode(encoded), true) local code = {"["\32\46\46\32"v"\32\46\46\32\99\32\46\46\32"] = v"\32\46\46\32\97\41\10\9\9\101\108\115\101\105\102\32\111\112\32\61\61\32"GETTABLE"\32\116\104\101\110\10\9\9\9\102\40"local v"\32\46\46\32\97\32\46\46\32" = v"\32\46\46\32\98\32\46\46\32"["\32\46\46\32"v"\32\46\46\32\99\32\46\46\32"]"\41\10\9\9\101\108\115\101\105\102\32\111\112\32\61\61\32"SETTABLEKS"\32\116\104\101\110\10\9\9\9\102\40"v"\32\46\46\32\98\32\46\46\32"["\32\46\46\32\99\111\110\115\116\40\75\41\32\46\46\32"] = v"\32\46\46\32\97\41\10\9\9\101\108\115\101\105\102\32\111\112\32\61\61\32"GETTABLEKS"\32\116\104\101\110\10\9\9\9\102\40"local v"\32\46\46\32\97\32\46\46\32" = v"\32\46\46\32\98\32\46\46\32"["\32\46\46\32\99\111\110\115\116\40\75\41\32\46\46\32"]"\41\10\9\9\101\108\115\101\105\102\32\111\112\32\61\61\32"GETGLOBAL"\32\116\104\101\110\10\9\9\9\102\40"local v"\32\46\46\32\97\32\46\46\32" = _G["\32\46\46\32\99\111\110\115\116\40\75\41\32\46\46\32"]"\41\10\9\9\101\108\115\101\105\102\32\111\112\32\61\61\32"SETGLOBAL"\32\116\104\101\110\10\9\9\9\102\40"_G["\32\46\46\32\99\111\110\115\116\40\75\41\32\46\46\32"] = v"\32\46\46\32\97\41\10\9\9\101\108\115\101\105\102\32\111\112\32\61\61\32"GETTABLEN"\32\116\104\101\110\10\9\9\9\102\40"local v"\32\46\46\32\97\32\46\46\32" = v"\32\46\46\32\98\32\46\46\32"["\32\46\46\32\99\32\46\46\32"]"\41\10\9\9\101\108\115\101\105\102\32\111\112\32\61\61\32"SETTABLEN"\32\116\104\101\110\10\9\9\9\102\40"v"\32\46\46\32\98\32\46\46\32"["\32\46\46\32\99\32\46\46\32"] = v"\32\46\46\32\97\41\10\9\9\101\108\115\101\105\102\32\111\112\32\61\61\32"NEWCLOSURE"\32\116\104\101\110\10\9\9\9\102\40" end return decompile
